window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "g3pylib", "modulename": "g3pylib", "kind": "module", "doc": "<h1 id=\"glasses3-python-library\">Glasses3 Python Library</h1>\n\n<p><strong>This library is still in alpha. It's not yet feature complete and there are no guarantees that the API will be stable.</strong></p>\n\n<p>A Python client for Glasses3. It handles all the low level details of communication with the Glasses3 websocket API and exposes a Python API which includes all the endpoints in the websocket API of the Glasses3 as well as some extra convenience methods. It also implements streaming with RTSP and service discovery with Zeroconf.</p>\n\n<p><strong>Note</strong></p>\n\n<p><em>This library should be platform independent in theory but the development has been done mainly in Windows environments and it's only briefly tested on other platforms.</em></p>\n\n<h2 id=\"installation\">Installation</h2>\n\n<p>For the moment we only support <em>Python 3.10</em>.</p>\n\n<p>To install this package, clone it and use either</p>\n\n<p><code>flit install</code></p>\n\n<p>or</p>\n\n<p><code>pip install .</code></p>\n\n<p>To run examples or tests you need some extra dependencies which are installed by default with the <code>flit</code> command. If you are using <code>pip</code> the extra dependencies can be installed alongside the library with</p>\n\n<p><code>pip install '.[test, examples, example-app]'</code></p>\n\n<p>on windows: \n<code>pip install \".[test, examples, example-app]\"</code></p>\n\n<h2 id=\"documentation\">Documentation</h2>\n\n<p>The library documentation can be found <a href=\"https://tobiipro.github.io/g3pylib/\">here</a> and there is also a developer guide for the glasses API in PDF format which can be downloaded <a href=\"https://www.tobiipro.com/product-listing/tobii-pro-glasses3-api/#ResourcesSpecifications\">here</a>.</p>\n\n<h2 id=\"environment\">Environment</h2>\n\n<p>The tests and examples load the glasses hostname, which by default is the serial number, from the <code>.env</code> file in the project root folder.\nSee example content below:</p>\n\n<pre><code>G3_HOSTNAME=tg03b-080200045321\n</code></pre>\n\n<p>You can also specify this variable directly in your environment.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<p>The <a href=\"https://github.com/tobiipro/g3pylib/tree/v0.3.0-alpha/examples\">example folder</a> contains a few smaller examples showcasing different use cases of the library as well as a larger controller application with a simple GUI.</p>\n\n<p>Run the example app with <code>python examples/g3pycontroller</code>.</p>\n\n<p>Note, the examples use OpenCV, and there is a known issue with OpenCV and PyAv. If you experience freezes when displaying video frames in the samples, please check out the workarounds in the <a href=\"https://github.com/opencv/opencv/issues/21952\">OpenCV repo</a>. Thanks <a href=\"https://github.com/edavalosanaya\">@edavalosanaya</a> for mentioning this in <a href=\"https://github.com/tobiipro/g3pylib/issues/83\">https://github.com/tobiipro/g3pylib/issues/83</a>.</p>\n\n<h2 id=\"contributing\">Contributing</h2>\n\n<p>More information on how to contribute to this project can be found in <a href=\"https://github.com/tobiipro/g3pylib/blob/v0.3.0-alpha/CONTRIBUTING.md\">CONTRIBUTING.md</a>.</p>\n\n<p>It contains developer guidelines as well as information on how to run tests and enable logging.</p>\n\n<p>g3pylib is a python wrapper around the Glasses3 web API which lets you control Glasses3 devices.</p>\n\n<h2 id=\"api-endpoints\">API Endpoints</h2>\n\n<p>All endpoints in the <code>g3pylib</code> module corresponding to an endpoint in the Glasses3 web API are undocumented and placed first in each module.\nThe following naming convention is used to translate web API endpoint names to <code>g3pylib\n</code> API endpoint names:</p>\n\n<ul>\n<li>Properties: example_property -> get_example_property/set_example_property</li>\n<li>Actions: example_action -> example_action</li>\n<li>Signals: example_signal -> subscribe_to_example_signal</li>\n</ul>\n\n<p>The web API endpoints can be browsed in the Glasses3 Example web client accessed via http://<em>your-g3-address</em>.</p>\n\n<h2 id=\"useful-information\">Useful information</h2>\n\n<p>In any code examples, <code>g3</code> will be a connected instance of <code>Glasses3</code>.</p>\n\n<p>The default hostname of a Glasses3 device is its serial number.</p>\n"}, {"fullname": "g3pylib.Glasses3", "modulename": "g3pylib", "qualname": "Glasses3", "kind": "class", "doc": "<p>Represents a Glasses3 device.</p>\n\n<p>Holds the API components and a WebSocket connection to a Glasses3 device.\nThe <code>stream_rtsp</code> context can be used for live stream functionality.</p>\n\n<p>For the recommended way to create a connected instance of Glasses3, see <code>connect_to_glasses</code>.</p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.Glasses3.__init__", "modulename": "g3pylib", "qualname": "Glasses3.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">rtsp_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">http_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">logger</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">Logger</span><span class=\"p\">,</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">LoggerAdapter</span><span class=\"p\">,</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "g3pylib.Glasses3.rtsp_url", "modulename": "g3pylib", "qualname": "Glasses3.rtsp_url", "kind": "variable", "doc": "<p>The RTSP URL used for live stream.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "g3pylib.Glasses3.stream_rtsp", "modulename": "g3pylib", "qualname": "Glasses3.stream_rtsp", "kind": "function", "doc": "<p>Set up an RTSP connection in the form of a Streams object with the Stream properties indicated by the arguments.</p>\n\n<p>The Stream objects can be used to demux/decode their stream. For example, <code>stream_rtsp()</code> can be used as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">connect_to_glasses</span><span class=\"p\">(</span><span class=\"n\">g3_hostname</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">g3</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">stream_rtsp</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">streams</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">scene_camera</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">decoded_stream</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">):</span>\n                <span class=\"n\">frame</span><span class=\"p\">,</span> <span class=\"n\">_timestamp</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">decoded_stream</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n                <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">frame</span><span class=\"o\">.</span><span class=\"n\">to_ndarray</span><span class=\"p\">(</span><span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s2\">&quot;bgr24&quot;</span><span class=\"p\">)</span>\n                <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"s2\">&quot;Video&quot;</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">)</span>\n                <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">waitKey</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<p><em>Alpha version note:</em> Only the scene_camera, eye_camera and gaze attributes are implemented so far.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">scene_camera</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eye_cameras</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">gaze</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sync</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">imu</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">Streams</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.Glasses3.close", "modulename": "g3pylib", "qualname": "Glasses3.close", "kind": "function", "doc": "<p>Close down the underlying websocket connection to the Glasses3 device.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.connect_to_glasses", "modulename": "g3pylib", "qualname": "connect_to_glasses", "kind": "class", "doc": "<p>This class contains a set of classmethods which are used to connect to a pair of glasses.</p>\n\n<p>The preferred way to use this class is as an async context manager like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">connect_to_glasses</span><span class=\"o\">.</span><span class=\"n\">with_hostname</span><span class=\"p\">(</span><span class=\"n\">glasses_serial_number</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">g3</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Here you can call the glasses</span>\n    <span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span>\n<span class=\"c1\"># Here the connection is closed</span>\n</code></pre>\n</div>\n\n<p>It does however also support usage without a <code>with</code>-block like this:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">g3</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">connect_to_glasses</span><span class=\"o\">.</span><span class=\"n\">with_hostname</span><span class=\"p\">(</span><span class=\"n\">glasses_serial_number</span><span class=\"p\">)</span>\n<span class=\"c1\"># Here you can call the glasses</span>\n<span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">get_name</span><span class=\"p\">()</span>\n<span class=\"c1\"># You have to remember to close the connection like this:</span>\n<span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"c1\"># And here g3 still exists but it is unusable</span>\n</code></pre>\n</div>\n"}, {"fullname": "g3pylib.connect_to_glasses.__init__", "modulename": "g3pylib", "qualname": "connect_to_glasses.__init__", "kind": "function", "doc": "<p>You should probably not use this constructor unless you need to generate the URLs to your glasses in a very specific way.\nThe regular use cases are covered in the alternative constructors below: <code>with_url</code>, <code>with_zeroconf</code>, <code>with_hostname</code> and <code>with_service</code>.</p>\n\n<p>If you want to use this constructor you need to supply a couroutine which returns a tuple that contains two URLs.\nThe first URL should point to the websocket and the second URL should point to the RTSP endpoint.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">url_generator</span><span class=\"p\">:</span> <span class=\"n\">Coroutine</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]]</span></span>)</span>"}, {"fullname": "g3pylib.connect_to_glasses.with_zeroconf", "modulename": "g3pylib", "qualname": "connect_to_glasses.with_zeroconf", "kind": "function", "doc": "<p>Connects by listening for available glasses on the network using zeroconf.\nConnects to the first pair of glasses that answers so if there are multiple glasses on the\nnetwork the behavior is undefined.</p>\n\n<p>If <code>using_ip</code> is set to True (default) we will generate the the URL used for connection with the ip.\nIf it's set to False we will use the hostname, which will depend on DNS working as it should.</p>\n\n<p><code>timeout</code> defines the time in milliseconds before <code>asyncio.TimeoutError</code> is raised.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">using_ip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">connect_to_glasses</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.connect_to_glasses.with_hostname", "modulename": "g3pylib", "qualname": "connect_to_glasses.with_hostname", "kind": "function", "doc": "<p>Connects to the pair of glasses with the given hostname.</p>\n\n<p>If <code>using_zeroconf</code> is set to False (default) we will not depend on zeroconf\nfor fetching details on how to generate the URL and instead use detault values for the URL components specified\nin the <a href=\"https://www.tobiipro.com/product-listing/tobii-pro-glasses3-api/#ResourcesSpecifications\">developer guide</a>.\nIf it's set to True, all URL components are fetched with zeroconf.</p>\n\n<p><code>using_ip</code> specifies if the ip or the hostname should be used in the URL used for connecting when zeroconf is used.\nIf the hostname is used, it depends on DNS working as it should.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">using_zeroconf</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">using_ip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">connect_to_glasses</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.connect_to_glasses.with_service", "modulename": "g3pylib", "qualname": "connect_to_glasses.with_service", "kind": "function", "doc": "<p>Connects to the pair of glasses referred to by the given service.</p>\n\n<p><code>using_ip</code> specifies if the ip or the hostname should be used in the URL used for connecting.\nIf the hostname is used, it depends on DNS working as it should.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">service</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">G3Service</span>,</span><span class=\"param\">\t<span class=\"n\">using_ip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">connect_to_glasses</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.connect_to_glasses.with_url", "modulename": "g3pylib", "qualname": "connect_to_glasses.with_url", "kind": "function", "doc": "<p>Connects to the pair of glasses at the specified URL. <code>ws_url</code> should\nbe a websocket URL (starting with <code>ws://</code>) and <code>rtsp_url</code> should be an RTSP\nurl (starting with <code>rtsp://</code> or <code>rtspt://</code>).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">ws_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">rtsp_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">http_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.calibrate", "modulename": "g3pylib.calibrate", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.calibrate.Calibrate", "modulename": "g3pylib.calibrate", "qualname": "Calibrate", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.calibrate.Calibrate.__init__", "modulename": "g3pylib.calibrate", "qualname": "Calibrate.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span>)</span>"}, {"fullname": "g3pylib.calibrate.Calibrate.get_name", "modulename": "g3pylib.calibrate", "qualname": "Calibrate.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.calibrate.Calibrate.emit_markers", "modulename": "g3pylib.calibrate", "qualname": "Calibrate.emit_markers", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.calibrate.Calibrate.run", "modulename": "g3pylib.calibrate", "qualname": "Calibrate.run", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.calibrate.Calibrate.subscribe_to_marker", "modulename": "g3pylib.calibrate", "qualname": "Calibrate.subscribe_to_marker", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.exceptions", "modulename": "g3pylib.exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.exceptions.InvalidResponseError", "modulename": "g3pylib.exceptions", "qualname": "InvalidResponseError", "kind": "class", "doc": "<p>Raised when the server responds with an invalid message.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.exceptions.FeatureNotAvailableError", "modulename": "g3pylib.exceptions", "qualname": "FeatureNotAvailableError", "kind": "class", "doc": "<p>Raised when a requested feature is not available due to improper initialization.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.g3typing", "modulename": "g3pylib.g3typing", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.g3typing.MessageId", "modulename": "g3pylib.g3typing", "qualname": "MessageId", "kind": "variable", "doc": "<p>An id corresponding to a request-response pair of messages on the websocket.</p>\n", "default_value": "g3pylib.g3typing.MessageId"}, {"fullname": "g3pylib.g3typing.URI", "modulename": "g3pylib.g3typing", "qualname": "URI", "kind": "variable", "doc": "<p>URI for an for API endpoint.</p>\n", "default_value": "g3pylib.g3typing.URI"}, {"fullname": "g3pylib.g3typing.JSONObject", "modulename": "g3pylib.g3typing", "qualname": "JSONObject", "kind": "variable", "doc": "<p>An attribute with the structure of a JSON object.</p>\n", "default_value": "typing.Union[int, str, bool, typing.Dict[str, ForwardRef(&#x27;JSONObject&#x27;)], typing.List[ForwardRef(&#x27;JSONObject&#x27;)], NoneType]"}, {"fullname": "g3pylib.g3typing.JSONDict", "modulename": "g3pylib.g3typing", "qualname": "JSONDict", "kind": "variable", "doc": "<p>An attribute with the structure of a JSON dict.</p>\n", "default_value": "typing.Dict[str, typing.Union[int, str, bool, typing.Dict[str, ForwardRef(&#x27;JSONObject&#x27;)], typing.List[ForwardRef(&#x27;JSONObject&#x27;)], NoneType]]"}, {"fullname": "g3pylib.g3typing.SignalId", "modulename": "g3pylib.g3typing", "qualname": "SignalId", "kind": "variable", "doc": "<p>An id corresponding to a Glasses3-signal.</p>\n", "default_value": "g3pylib.g3typing.SignalId"}, {"fullname": "g3pylib.g3typing.SignalBody", "modulename": "g3pylib.g3typing", "qualname": "SignalBody", "kind": "variable", "doc": "<p>The body of a received signal websocket message.</p>\n", "default_value": "g3pylib.g3typing.SignalBody"}, {"fullname": "g3pylib.g3typing.SubscriptionId", "modulename": "g3pylib.g3typing", "qualname": "SubscriptionId", "kind": "variable", "doc": "<p>An id corresponding to a subscription to a Glasses3-signal.</p>\n", "default_value": "g3pylib.g3typing.SubscriptionId"}, {"fullname": "g3pylib.recorder", "modulename": "g3pylib.recorder", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.recorder.Recorder", "modulename": "g3pylib.recorder", "qualname": "Recorder", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.recorder.Recorder.__init__", "modulename": "g3pylib.recorder", "qualname": "Recorder.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span>)</span>"}, {"fullname": "g3pylib.recorder.Recorder.get_created", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_created", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_current_gaze_frequency", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_current_gaze_frequency", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_duration", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_folder", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.set_folder", "modulename": "g3pylib.recorder", "qualname": "Recorder.set_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_gaze_overlay", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_gaze_overlay", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_gaze_samples", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_gaze_samples", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_name", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_remaining_time", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_remaining_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_timezone", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_timezone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_uuid", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_uuid", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_valid_gaze_samples", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_valid_gaze_samples", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.get_visible_name", "modulename": "g3pylib.recorder", "qualname": "Recorder.get_visible_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.set_visible_name", "modulename": "g3pylib.recorder", "qualname": "Recorder.set_visible_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.cancel", "modulename": "g3pylib.recorder", "qualname": "Recorder.cancel", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.meta_insert", "modulename": "g3pylib.recorder", "qualname": "Recorder.meta_insert", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.meta_keys", "modulename": "g3pylib.recorder", "qualname": "Recorder.meta_keys", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.meta_lookup", "modulename": "g3pylib.recorder", "qualname": "Recorder.meta_lookup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.send_event", "modulename": "g3pylib.recorder", "qualname": "Recorder.send_event", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.snapshot", "modulename": "g3pylib.recorder", "qualname": "Recorder.snapshot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.start", "modulename": "g3pylib.recorder", "qualname": "Recorder.start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.stop", "modulename": "g3pylib.recorder", "qualname": "Recorder.stop", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.subscribe_to_started", "modulename": "g3pylib.recorder", "qualname": "Recorder.subscribe_to_started", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recorder.Recorder.subscribe_to_stopped", "modulename": "g3pylib.recorder", "qualname": "Recorder.subscribe_to_stopped", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings", "modulename": "g3pylib.recordings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.recordings.RecordingsEventKind", "modulename": "g3pylib.recordings", "qualname": "RecordingsEventKind", "kind": "class", "doc": "<p>Defines event kinds for the <code>Recordings</code> class. These events are emitted to the <code>Recordings.events</code> queue in the context <code>Recordings.keep_updated_in_context</code>.</p>\n", "bases": "enum.Enum"}, {"fullname": "g3pylib.recordings.RecordingsEventKind.ADDED", "modulename": "g3pylib.recordings", "qualname": "RecordingsEventKind.ADDED", "kind": "variable", "doc": "<p>A recording was added.</p>\n", "default_value": "&lt;RecordingsEventKind.ADDED: 1&gt;"}, {"fullname": "g3pylib.recordings.RecordingsEventKind.REMOVED", "modulename": "g3pylib.recordings", "qualname": "RecordingsEventKind.REMOVED", "kind": "variable", "doc": "<p>A recording was removed.</p>\n", "default_value": "&lt;RecordingsEventKind.REMOVED: 2&gt;"}, {"fullname": "g3pylib.recordings.Recordings", "modulename": "g3pylib.recordings", "qualname": "Recordings", "kind": "class", "doc": "<p>All the operations on a read-only sequence.</p>\n\n<p>Concrete subclasses must override __new__ or __init__,\n__getitem__, and __len__.</p>\n", "bases": "g3pylib._utils.APIComponent, collections.abc.Sequence[g3pylib.recordings.recording.Recording]"}, {"fullname": "g3pylib.recordings.Recordings.__init__", "modulename": "g3pylib.recordings", "qualname": "Recordings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span>,</span><span class=\"param\">\t<span class=\"n\">http_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "g3pylib.recordings.Recordings.get_name", "modulename": "g3pylib.recordings", "qualname": "Recordings.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.delete", "modulename": "g3pylib.recordings", "qualname": "Recordings.delete", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.subscribe_to_child_added", "modulename": "g3pylib.recordings", "qualname": "Recordings.subscribe_to_child_added", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.subscribe_to_child_removed", "modulename": "g3pylib.recordings", "qualname": "Recordings.subscribe_to_child_removed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.subscribe_to_deleted", "modulename": "g3pylib.recordings", "qualname": "Recordings.subscribe_to_deleted", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.subscribe_to_scan_done", "modulename": "g3pylib.recordings", "qualname": "Recordings.subscribe_to_scan_done", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.subscribe_to_scan_start", "modulename": "g3pylib.recordings", "qualname": "Recordings.subscribe_to_scan_start", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.start_children_handler_tasks", "modulename": "g3pylib.recordings", "qualname": "Recordings.start_children_handler_tasks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.stop_children_handler_tasks", "modulename": "g3pylib.recordings", "qualname": "Recordings.stop_children_handler_tasks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.Recordings.events", "modulename": "g3pylib.recordings", "qualname": "Recordings.events", "kind": "variable", "doc": "<p>An event queue containing added and removed recording events.</p>\n\n<p>Is kept updated in the context <code>keep_updated_in_context</code>.</p>\n", "annotation": ": asyncio.queues.Queue[typing.Tuple[g3pylib.recordings.RecordingsEventKind, g3pylib.g3typing.SignalBody]]"}, {"fullname": "g3pylib.recordings.Recordings.children", "modulename": "g3pylib.recordings", "qualname": "Recordings.children", "kind": "variable", "doc": "<p>A list of all current recordings.</p>\n\n<p>This property is not recommended for use since the object itself has functionality of a\n<a href=\"https://docs.python.org/3/library/collections.abc.html\"><code>collections.abc.Sequence</code></a>.</p>\n\n<p>Is updated in the context <code>keep_updated_in_context</code>.</p>\n", "annotation": ": List[g3pylib.recordings.recording.Recording]"}, {"fullname": "g3pylib.recordings.Recordings.get_recording", "modulename": "g3pylib.recordings", "qualname": "Recordings.get_recording", "kind": "function", "doc": "<p>Returns the recording specified by <code>uuid</code>.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">recordings</span><span class=\"o\">.</span><span class=\"n\">recording</span><span class=\"o\">.</span><span class=\"n\">Recording</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.recordings.Recordings.keep_updated_in_context", "modulename": "g3pylib.recordings", "qualname": "Recordings.keep_updated_in_context", "kind": "function", "doc": "<p>Keep the <code>Recordings</code> state continuously updated in the context by listening for added and removed recordings.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">recordings</span><span class=\"o\">.</span><span class=\"n\">keep_updated_in_context</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">recorder</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">recordings</span><span class=\"p\">))</span> <span class=\"c1\"># current number of recordings on device</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">recordings</span><span class=\"o\">.</span><span class=\"n\">events</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span> <span class=\"c1\"># next event from the event queue</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.recordings.recording", "modulename": "g3pylib.recordings.recording", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.recordings.recording.Recording", "modulename": "g3pylib.recordings.recording", "qualname": "Recording", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.recordings.recording.Recording.__init__", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_base_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span>,</span><span class=\"param\">\t<span class=\"n\">uuid</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">http_url</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "g3pylib.recordings.recording.Recording.get_created", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_created", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_duration", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_duration", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">timedelta</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_folder", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_folder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_gaze_overlay", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_gaze_overlay", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_gaze_samples", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_gaze_samples", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_http_path", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_http_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_name", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_rtsp_path", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_rtsp_path", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_timezone", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_timezone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_valid_gaze_samples", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_valid_gaze_samples", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_visible_name", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_visible_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.set_visible_name", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.set_visible_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.meta_insert", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.meta_insert", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">meta</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.meta_keys", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.meta_keys", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.meta_lookup", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.meta_lookup", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.move", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.move", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folder</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.uuid", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.uuid", "kind": "variable", "doc": "<p>The uuid of the recording.</p>\n", "annotation": ": str"}, {"fullname": "g3pylib.recordings.recording.Recording.get_scenevideo_url", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_scenevideo_url", "kind": "function", "doc": "<p>Returns a URL to the recording's video file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.recordings.recording.Recording.get_gazedata_url", "modulename": "g3pylib.recordings.recording", "qualname": "Recording.get_gazedata_url", "kind": "function", "doc": "<p>Returns a URL to the recording's decompressed gaze data file.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary", "modulename": "g3pylib.rudimentary", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.rudimentary.Rudimentary", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.rudimentary.Rudimentary.__init__", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span>)</span>"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_event_sample", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_event_sample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_gaze_sample", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_gaze_sample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_imu_sample", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_imu_sample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_name", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_scene_quality", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_scene_quality", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.set_scene_quality", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.set_scene_quality", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_scene_scale", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_scene_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.set_scene_scale", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.set_scene_scale", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.get_sync_port_sample", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.get_sync_port_sample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.start_streams", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.start_streams", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.stop_streams", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.stop_streams", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.calibrate", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.calibrate", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.keepalive", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.keepalive", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.send_event", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.send_event", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">tag</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"nb\">object</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.subscribe_to_event", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.subscribe_to_event", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.subscribe_to_gaze", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.subscribe_to_gaze", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.subscribe_to_imu", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.subscribe_to_imu", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.subscribe_to_scene", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.subscribe_to_scene", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.subscribe_to_sync_port", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.subscribe_to_sync_port", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.rudimentary.Rudimentary.keep_alive_in_context", "modulename": "g3pylib.rudimentary", "qualname": "Rudimentary.keep_alive_in_context", "kind": "function", "doc": "<p>Regularly sends keep alive messages to keep rudimentary streams alive.</p>\n\n<p>Example usage:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">rudimentary</span><span class=\"o\">.</span><span class=\"n\">keep_alive_in_context</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">rudimentary</span><span class=\"o\">.</span><span class=\"n\">get_gaze_sample</span><span class=\"p\">())</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.settings", "modulename": "g3pylib.settings", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.settings.Settings", "modulename": "g3pylib.settings", "qualname": "Settings", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.settings.Settings.__init__", "modulename": "g3pylib.settings", "qualname": "Settings.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span>)</span>"}, {"fullname": "g3pylib.settings.Settings.get_gaze_frequency", "modulename": "g3pylib.settings", "qualname": "Settings.get_gaze_frequency", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.settings.Settings.set_gaze_frequency", "modulename": "g3pylib.settings", "qualname": "Settings.set_gaze_frequency", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.settings.Settings.get_gaze_overlay", "modulename": "g3pylib.settings", "qualname": "Settings.get_gaze_overlay", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.settings.Settings.set_gaze_overlay", "modulename": "g3pylib.settings", "qualname": "Settings.set_gaze_overlay", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.settings.Settings.get_name", "modulename": "g3pylib.settings", "qualname": "Settings.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.settings.Settings.subscribe_to_changed", "modulename": "g3pylib.settings", "qualname": "Settings.subscribe_to_changed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.streams", "modulename": "g3pylib.streams", "kind": "module", "doc": "<p><em>Alpha version note:</em> Only the scene_camera, eye_camera and gaze attributes are implemented so far.</p>\n"}, {"fullname": "g3pylib.streams.StreamType", "modulename": "g3pylib.streams", "qualname": "StreamType", "kind": "class", "doc": "<p>Defines the different stream types in an RTSP stream.</p>\n", "bases": "enum.Enum"}, {"fullname": "g3pylib.streams.StreamType.SCENE_CAMERA", "modulename": "g3pylib.streams", "qualname": "StreamType.SCENE_CAMERA", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.SCENE_CAMERA: 1&gt;"}, {"fullname": "g3pylib.streams.StreamType.AUDIO", "modulename": "g3pylib.streams", "qualname": "StreamType.AUDIO", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.AUDIO: 2&gt;"}, {"fullname": "g3pylib.streams.StreamType.EYE_CAMERAS", "modulename": "g3pylib.streams", "qualname": "StreamType.EYE_CAMERAS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.EYE_CAMERAS: 3&gt;"}, {"fullname": "g3pylib.streams.StreamType.GAZE", "modulename": "g3pylib.streams", "qualname": "StreamType.GAZE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.GAZE: 4&gt;"}, {"fullname": "g3pylib.streams.StreamType.SYNC", "modulename": "g3pylib.streams", "qualname": "StreamType.SYNC", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.SYNC: 5&gt;"}, {"fullname": "g3pylib.streams.StreamType.IMU", "modulename": "g3pylib.streams", "qualname": "StreamType.IMU", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.IMU: 6&gt;"}, {"fullname": "g3pylib.streams.StreamType.EVENTS", "modulename": "g3pylib.streams", "qualname": "StreamType.EVENTS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;StreamType.EVENTS: 7&gt;"}, {"fullname": "g3pylib.streams.StreamType.property_name", "modulename": "g3pylib.streams", "qualname": "StreamType.property_name", "kind": "variable", "doc": "<p>The stream type's property name as a string.</p>\n", "annotation": ": str"}, {"fullname": "g3pylib.streams.NALUnit", "modulename": "g3pylib.streams", "qualname": "NALUnit", "kind": "class", "doc": "<p>Represents a RTP or H264 NAL unit</p>\n\n<p>The structure of RTP NAL units are described in detail in <a href=\"https://www.rfc-editor.org/rfc/rfc6184\">RFC 6184</a>\nand H.264 NAL units are described in the <a href=\"https://www.itu.int/rec/T-REC-H.264/en\">H.264 specification</a></p>\n"}, {"fullname": "g3pylib.streams.NALUnit.__init__", "modulename": "g3pylib.streams", "qualname": "NALUnit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"nb\">bytearray</span><span class=\"p\">,</span> <span class=\"nb\">memoryview</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "g3pylib.streams.NALUnit.data", "modulename": "g3pylib.streams", "qualname": "NALUnit.data", "kind": "variable", "doc": "<p>Header and payload.</p>\n", "annotation": ": bytearray"}, {"fullname": "g3pylib.streams.NALUnit.f", "modulename": "g3pylib.streams", "qualname": "NALUnit.f", "kind": "variable", "doc": "<p>Forbidden zero bit.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.NALUnit.nri", "modulename": "g3pylib.streams", "qualname": "NALUnit.nri", "kind": "variable", "doc": "<p>NAL ref IDC.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.NALUnit.type", "modulename": "g3pylib.streams", "qualname": "NALUnit.type", "kind": "variable", "doc": "<p>NAL unit type.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.NALUnit.header", "modulename": "g3pylib.streams", "qualname": "NALUnit.header", "kind": "variable", "doc": "<p>The header of the NAL unit or FU indicator in the case of a fragmentation unit.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.NALUnit.payload", "modulename": "g3pylib.streams", "qualname": "NALUnit.payload", "kind": "variable", "doc": "<p>The payload of the NAL unit.</p>\n", "annotation": ": bytes"}, {"fullname": "g3pylib.streams.NALUnit.data_with_prefix", "modulename": "g3pylib.streams", "qualname": "NALUnit.data_with_prefix", "kind": "variable", "doc": "<p>The header and payload of the NAL unit with start code prefix prepended.</p>\n", "annotation": ": bytes"}, {"fullname": "g3pylib.streams.NALUnit.from_rtp_payload", "modulename": "g3pylib.streams", "qualname": "NALUnit.from_rtp_payload", "kind": "function", "doc": "<p>Constructs <code>NALUnit</code> from an rtp payload.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">rtp_payload</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">NALUnit</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.NALUnit.from_fu_a", "modulename": "g3pylib.streams", "qualname": "NALUnit.from_fu_a", "kind": "function", "doc": "<p>Constructs <code>NALUnit</code> from an FUA.</p>\n\n<p>Note that fragmented NAL unit payloads must be aggregated before they can get parsed.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">fu_a</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">FUA</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">NALUnit</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.FUA", "modulename": "g3pylib.streams", "qualname": "FUA", "kind": "class", "doc": "<p>A specific type of RTP NAL unit called FU-A (Fragmentation Unit type A).\nDescribed in detail in RFC 6184 section <a href=\"https://datatracker.ietf.org/doc/html/rfc6184#section-5.8\">5.8</a>.</p>\n", "bases": "NALUnit"}, {"fullname": "g3pylib.streams.FUA.s", "modulename": "g3pylib.streams", "qualname": "FUA.s", "kind": "variable", "doc": "<p>Start bit for fragmentation unit.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.FUA.e", "modulename": "g3pylib.streams", "qualname": "FUA.e", "kind": "variable", "doc": "<p>End bit for fragmentation unit.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.FUA.original_type", "modulename": "g3pylib.streams", "qualname": "FUA.original_type", "kind": "variable", "doc": "<p>The type of the NAL unit contained in the fragmentation unit.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.FUA.fu_header", "modulename": "g3pylib.streams", "qualname": "FUA.fu_header", "kind": "variable", "doc": "<p>The extra header in fragmentation units.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.Stream", "modulename": "g3pylib.streams", "qualname": "Stream", "kind": "class", "doc": "<p>Abstract class for a RTSP media stream.</p>\n", "bases": "aiortsp.transport.base.RTPTransportClient, abc.ABC"}, {"fullname": "g3pylib.streams.Stream.transport", "modulename": "g3pylib.streams", "qualname": "Stream.transport", "kind": "variable", "doc": "<p>A wrapper around a pair of UDP (or TCP) sockets.</p>\n", "annotation": ": aiortsp.transport.base.RTPTransport"}, {"fullname": "g3pylib.streams.Stream.rtp_queue", "modulename": "g3pylib.streams", "qualname": "Stream.rtp_queue", "kind": "variable", "doc": "<p>The queue where all received raw RTP packets get queued for demuxing and decoding.</p>\n", "annotation": ": asyncio.queues.Queue[typing.Tuple[dpkt.rtp.RTP, typing.Optional[float]]]"}, {"fullname": "g3pylib.streams.Stream.rtcp_queue", "modulename": "g3pylib.streams", "qualname": "Stream.rtcp_queue", "kind": "variable", "doc": "<p>The queue where all received raw RTCP packets get queued for demuxing and decoding.</p>\n", "annotation": ": asyncio.queues.Queue[aiortsp.rtcp.parser.RTCP]"}, {"fullname": "g3pylib.streams.Stream.type", "modulename": "g3pylib.streams", "qualname": "Stream.type", "kind": "variable", "doc": "<p>The type of this media stream. For example scene camera or gaze.</p>\n", "annotation": ": g3pylib.streams.StreamType"}, {"fullname": "g3pylib.streams.Stream.handle_rtp", "modulename": "g3pylib.streams", "qualname": "Stream.handle_rtp", "kind": "function", "doc": "<p>A callback which is called everytime a new RTP packet is received. Queues the packet and\ncalculates its absolute NTP timestamp.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rtp</span><span class=\"p\">:</span> <span class=\"n\">dpkt</span><span class=\"o\">.</span><span class=\"n\">rtp</span><span class=\"o\">.</span><span class=\"n\">RTP</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.Stream.handle_rtcp", "modulename": "g3pylib.streams", "qualname": "Stream.handle_rtcp", "kind": "function", "doc": "<p>A callback which is called everytime a new RTCP packet is received. Queues the packet and\nextracts information needed for calculations of absolute time.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">rtcp</span><span class=\"p\">:</span> <span class=\"n\">aiortsp</span><span class=\"o\">.</span><span class=\"n\">rtcp</span><span class=\"o\">.</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">RTCP</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.Stream.stats", "modulename": "g3pylib.streams", "qualname": "Stream.stats", "kind": "variable", "doc": "<p>Should contain some media stream statistics. Used mainly for debugging purposes.</p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "g3pylib.streams.Stream.media_stream_configuration", "modulename": "g3pylib.streams", "qualname": "Stream.media_stream_configuration", "kind": "variable", "doc": "<p>A <code>MediaStreamConfiguration</code> for this media stream which is used for configuring the <code>RTSPMediaSession</code></p>\n", "annotation": ": aiortsp.rtsp.session.MediaStreamConfiguration"}, {"fullname": "g3pylib.streams.Stream.media_type", "modulename": "g3pylib.streams", "qualname": "Stream.media_type", "kind": "variable", "doc": "<p>Should be the media type identifier of the <code>Stream</code> subclass.</p>\n", "annotation": ": Literal[&#x27;video&#x27;, &#x27;audio&#x27;, &#x27;text&#x27;, &#x27;application&#x27;, &#x27;message&#x27;]"}, {"fullname": "g3pylib.streams.Stream.media_index", "modulename": "g3pylib.streams", "qualname": "Stream.media_index", "kind": "variable", "doc": "<p>The media index of the stream.</p>\n\n<p>Every separate media stream in the RTSP media session is identified by its <code>media_type</code> and its <code>media_index</code>.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.streams.Stream.setup", "modulename": "g3pylib.streams", "qualname": "Stream.setup", "kind": "function", "doc": "<p>The main entry point of a <code>Stream</code>.</p>\n\n<p>Sets up a transport for RTP and RTCP packets and instantiates a <code>Stream</code> object containing the transport.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">aiortsp</span><span class=\"o\">.</span><span class=\"n\">rtsp</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">RTSPConnection</span>,</span><span class=\"param\">\t<span class=\"n\">stream_type</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">StreamType</span>,</span><span class=\"param\">\t<span class=\"n\">scheme</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">Stream</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.Stream.demux", "modulename": "g3pylib.streams", "qualname": "Stream.demux", "kind": "function", "doc": "<p>Should return a queue with tuples containing the demuxed RTP stream along with timestamps.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.Stream.decode", "modulename": "g3pylib.streams", "qualname": "Stream.decode", "kind": "function", "doc": "<p>Should return a queue with tuples containing the demuxed and decoded RTP stream along with timestamps.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.DataStream", "modulename": "g3pylib.streams", "qualname": "DataStream", "kind": "class", "doc": "<p>Abstract class for a RTSP media stream.</p>\n", "bases": "Stream"}, {"fullname": "g3pylib.streams.DataStream.__init__", "modulename": "g3pylib.streams", "qualname": "DataStream.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transport</span><span class=\"p\">:</span> <span class=\"n\">aiortsp</span><span class=\"o\">.</span><span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">RTPTransport</span>,</span><span class=\"param\">\t<span class=\"n\">stream_type</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">StreamType</span></span>)</span>"}, {"fullname": "g3pylib.streams.DataStream.media_type", "modulename": "g3pylib.streams", "qualname": "DataStream.media_type", "kind": "variable", "doc": "<p>Should be the media type identifier of the <code>Stream</code> subclass.</p>\n", "annotation": ": Literal[&#x27;video&#x27;, &#x27;audio&#x27;, &#x27;text&#x27;, &#x27;application&#x27;, &#x27;message&#x27;]"}, {"fullname": "g3pylib.streams.DataStream.stats", "modulename": "g3pylib.streams", "qualname": "DataStream.stats", "kind": "variable", "doc": "<p>Should contain some media stream statistics. Used mainly for debugging purposes.</p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "g3pylib.streams.DataStream.demux", "modulename": "g3pylib.streams", "qualname": "DataStream.demux", "kind": "function", "doc": "<p>Should return a queue with tuples containing the demuxed RTP stream along with timestamps.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.DataStream.decode", "modulename": "g3pylib.streams", "qualname": "DataStream.decode", "kind": "function", "doc": "<p>Should return a queue with tuples containing the demuxed and decoded RTP stream along with timestamps.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.VideoStream", "modulename": "g3pylib.streams", "qualname": "VideoStream", "kind": "class", "doc": "<p>Represents a RTSP video stream.</p>\n\n<p>Handles demuxing and decoding of video frames.</p>\n", "bases": "Stream"}, {"fullname": "g3pylib.streams.VideoStream.__init__", "modulename": "g3pylib.streams", "qualname": "VideoStream.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">transport</span><span class=\"p\">:</span> <span class=\"n\">aiortsp</span><span class=\"o\">.</span><span class=\"n\">transport</span><span class=\"o\">.</span><span class=\"n\">base</span><span class=\"o\">.</span><span class=\"n\">RTPTransport</span>,</span><span class=\"param\">\t<span class=\"n\">stream_type</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">StreamType</span></span>)</span>"}, {"fullname": "g3pylib.streams.VideoStream.media_type", "modulename": "g3pylib.streams", "qualname": "VideoStream.media_type", "kind": "variable", "doc": "<p>The media type identifier of a <code>VideoStream</code>.</p>\n", "annotation": ": Literal[&#x27;video&#x27;, &#x27;audio&#x27;, &#x27;text&#x27;, &#x27;application&#x27;, &#x27;message&#x27;]"}, {"fullname": "g3pylib.streams.VideoStream.stats", "modulename": "g3pylib.streams", "qualname": "VideoStream.stats", "kind": "variable", "doc": "<p>Contains some media stream statistics. Used mainly for debugging purposes.</p>\n", "annotation": ": Dict[str, int]"}, {"fullname": "g3pylib.streams.VideoStream.demux", "modulename": "g3pylib.streams", "qualname": "VideoStream.demux", "kind": "function", "doc": "<p>Returns a queue with tuples containing the demuxed RTP stream along with timestamps.</p>\n\n<p>Spawns a demuxer task which parses the NAL units received in the RTP payloads.\nIt also aggregates fragmentation units of larger NAL units sent in multiple RTP packets.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">NALUnit</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.VideoStream.decode", "modulename": "g3pylib.streams", "qualname": "VideoStream.decode", "kind": "function", "doc": "<p>Returns a queue with tuples containing the demuxed and decoded RTP stream along with timestamps.</p>\n\n<p>Spawns a decoder task which uses PyAV (ffmpeg) to parse and decode the demuxed NAL units.</p>\n\n<p>The returned queue contains PyAVs <code>av.VideoFrame</code> objects along with timestamps.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">]]]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.Streams", "modulename": "g3pylib.streams", "qualname": "Streams", "kind": "class", "doc": "<p>Handles a <code>RTSPMediaSession</code> with one or multiple media streams.</p>\n\n<p>Exposes a <code>connect</code> function which is used to set up an RTSP media session and create an instance of this object.\nGives easy access to the different streams.</p>\n\n<p>After the setup process is completed, await the <code>play</code> coroutine to start the streaming.</p>\n"}, {"fullname": "g3pylib.streams.Streams.__init__", "modulename": "g3pylib.streams", "qualname": "Streams.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">session</span><span class=\"p\">:</span> <span class=\"n\">aiortsp</span><span class=\"o\">.</span><span class=\"n\">rtsp</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">RTSPMediaSession</span>,</span><span class=\"param\">\t<span class=\"n\">streams</span><span class=\"p\">:</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">Stream</span><span class=\"p\">]</span></span>)</span>"}, {"fullname": "g3pylib.streams.Streams.connect", "modulename": "g3pylib.streams", "qualname": "Streams.connect", "kind": "function", "doc": "<p>Sets up an RTSP media session with the specified streams and creates an instance of <code>Streams</code>.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">rtsp_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">scene_camera</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">audio</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eye_cameras</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">gaze</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sync</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">imu</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">streams</span><span class=\"o\">.</span><span class=\"n\">Streams</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.streams.Streams.play", "modulename": "g3pylib.streams", "qualname": "Streams.play", "kind": "function", "doc": "<p>Starts the streaming in the RTSP media session.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system", "modulename": "g3pylib.system", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.system.System", "modulename": "g3pylib.system", "qualname": "System", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.system.System.__init__", "modulename": "g3pylib.system", "qualname": "System.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span>)</span>"}, {"fullname": "g3pylib.system.System.get_head_unit_serial", "modulename": "g3pylib.system", "qualname": "System.get_head_unit_serial", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_name", "modulename": "g3pylib.system", "qualname": "System.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_ntp_is_enabled", "modulename": "g3pylib.system", "qualname": "System.get_ntp_is_enabled", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_ntp_is_synchronized", "modulename": "g3pylib.system", "qualname": "System.get_ntp_is_synchronized", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_recording_unit_serial", "modulename": "g3pylib.system", "qualname": "System.get_recording_unit_serial", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_time", "modulename": "g3pylib.system", "qualname": "System.get_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_timezone", "modulename": "g3pylib.system", "qualname": "System.get_timezone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.get_version", "modulename": "g3pylib.system", "qualname": "System.get_version", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.available_gaze_frequencies", "modulename": "g3pylib.system", "qualname": "System.available_gaze_frequencies", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.set_time", "modulename": "g3pylib.system", "qualname": "System.set_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.set_timezone", "modulename": "g3pylib.system", "qualname": "System.set_timezone", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.System.use_ntp", "modulename": "g3pylib.system", "qualname": "System.use_ntp", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">bool</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.battery", "modulename": "g3pylib.system.battery", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.system.battery.BatteryState", "modulename": "g3pylib.system.battery", "qualname": "BatteryState", "kind": "class", "doc": "<p>Defines battery levels.</p>\n", "bases": "enum.Enum"}, {"fullname": "g3pylib.system.battery.BatteryState.FULL", "modulename": "g3pylib.system.battery", "qualname": "BatteryState.FULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BatteryState.FULL: &#x27;full&#x27;&gt;"}, {"fullname": "g3pylib.system.battery.BatteryState.GOOD", "modulename": "g3pylib.system.battery", "qualname": "BatteryState.GOOD", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BatteryState.GOOD: &#x27;good&#x27;&gt;"}, {"fullname": "g3pylib.system.battery.BatteryState.LOW", "modulename": "g3pylib.system.battery", "qualname": "BatteryState.LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BatteryState.LOW: &#x27;low&#x27;&gt;"}, {"fullname": "g3pylib.system.battery.BatteryState.VERY_LOW", "modulename": "g3pylib.system.battery", "qualname": "BatteryState.VERY_LOW", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BatteryState.VERY_LOW: &#x27;verylow&#x27;&gt;"}, {"fullname": "g3pylib.system.battery.BatteryState.UNKNOWN", "modulename": "g3pylib.system.battery", "qualname": "BatteryState.UNKNOWN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;BatteryState.UNKNOWN: &#x27;unknown&#x27;&gt;"}, {"fullname": "g3pylib.system.battery.Battery", "modulename": "g3pylib.system.battery", "qualname": "Battery", "kind": "class", "doc": "<p></p>\n", "bases": "g3pylib._utils.APIComponent"}, {"fullname": "g3pylib.system.battery.Battery.__init__", "modulename": "g3pylib.system.battery", "qualname": "Battery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>,</span><span class=\"param\">\t<span class=\"n\">api_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span>)</span>"}, {"fullname": "g3pylib.system.battery.Battery.get_charging", "modulename": "g3pylib.system.battery", "qualname": "Battery.get_charging", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.battery.Battery.get_level", "modulename": "g3pylib.system.battery", "qualname": "Battery.get_level", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">float</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.battery.Battery.get_name", "modulename": "g3pylib.system.battery", "qualname": "Battery.get_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.battery.Battery.get_remaining_time", "modulename": "g3pylib.system.battery", "qualname": "Battery.get_remaining_time", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.battery.Battery.get_state", "modulename": "g3pylib.system.battery", "qualname": "Battery.get_state", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">system</span><span class=\"o\">.</span><span class=\"n\">battery</span><span class=\"o\">.</span><span class=\"n\">BatteryState</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.system.battery.Battery.subscribe_to_state_changed", "modulename": "g3pylib.system.battery", "qualname": "Battery.subscribe_to_state_changed", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.websocket", "modulename": "g3pylib.websocket", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.websocket.connect", "modulename": "g3pylib.websocket", "qualname": "connect", "kind": "function", "doc": "<p>Sets up a websocket connection with a Glasses3 device.</p>\n\n<p>Uses WebSocketClientProtocol from websockets to create a connection with the supplied hostname\nand websocket uri.</p>\n\n<p>Takes the hostname (which by default is the serial number of the recording unit) and websocket\nconnection uri as input.</p>\n\n<p>Returns a Connect object that communicates with Glasses3.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">ws_url</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">websockets</span><span class=\"o\">.</span><span class=\"n\">legacy</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Connect</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.websocket.SignalSubscriptionHandler", "modulename": "g3pylib.websocket", "qualname": "SignalSubscriptionHandler", "kind": "class", "doc": "<p>Manages (un)subscriptions to Glasses3 signals.</p>\n\n<p>Keeps track of all current subscriptions and adds/removes subscriptions as needed. Upon any\nsignal event all subscribers get the body of the response added to a queue to be handled.</p>\n", "bases": "abc.ABC"}, {"fullname": "g3pylib.websocket.SignalSubscriptionHandler.subscribe_to_signal", "modulename": "g3pylib.websocket", "qualname": "SignalSubscriptionHandler.subscribe_to_signal", "kind": "function", "doc": "<p>Sets up a subscription to the signal with the specified <code>signal_uri</code>.</p>\n\n<p>Returns a tuple with a queue and an awaitable. Upon receiving signals messages, the message\nbody is added to the queue. The awaitable can be awaited to unsubscribe to the signal.</p>\n\n<p>Example usage to handle the gaze signal in the rudimentary component:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">queue</span><span class=\"p\">,</span> <span class=\"n\">unsubscribe</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">g3</span><span class=\"o\">.</span><span class=\"n\">rudimentary</span><span class=\"o\">.</span><span class=\"n\">subscribe_to_gaze</span><span class=\"p\">()</span>\n<span class=\"c1\"># handle gaze signals in queue</span>\n<span class=\"k\">await</span> <span class=\"n\">unsubscribe</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">signal_uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">SignalBody</span><span class=\"p\">],</span> <span class=\"n\">Awaitable</span><span class=\"p\">[</span><span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol", "kind": "class", "doc": "<p>WebSocket connection to a Glasses3 device.</p>\n\n<p>Provides <code>require_get</code>, <code>require_post</code> and <code>require</code> methods for sending and receiving messages. Note that <code>start_receiver_task</code> must be called for require calls to return responses.</p>\n\n<p>Also keeps track of signal subscriptions on the websocket.</p>\n", "bases": "websockets.legacy.client.WebSocketClientProtocol, SignalSubscriptionHandler"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.__init__", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.__init__", "kind": "function", "doc": "<p>Initializes super class properties and additional properties needed for the communication.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"o\">*</span>,</span><span class=\"param\">\t<span class=\"n\">subprotocols</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">websockets</span><span class=\"o\">.</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Subprotocol</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.factory", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.factory", "kind": "function", "doc": "<p>This is needed to deal with typing problems since the websockets.connect parameter\ncreate_protocol takes a callable as input.</p>\n\n<p>For example, a connection can be established as follows:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">websockets</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n    <span class=\"sa\">f</span><span class=\"s2\">&quot;ws://</span><span class=\"si\">{</span><span class=\"n\">g3_hostname</span><span class=\"si\">}</span><span class=\"s2\">/websockets&quot;</span><span class=\"p\">,</span>\n    <span class=\"n\">create_protocol</span><span class=\"o\">=</span><span class=\"n\">G3WebSocketClientProtocol</span><span class=\"o\">.</span><span class=\"n\">factory</span><span class=\"p\">,</span>\n<span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">g3ws</span><span class=\"p\">:</span>\n    <span class=\"n\">g3ws</span> <span class=\"o\">=</span> <span class=\"n\">cast</span><span class=\"p\">(</span><span class=\"n\">G3WebSocketClientProtocol</span><span class=\"p\">,</span> <span class=\"n\">g3ws</span><span class=\"p\">)</span>\n    <span class=\"n\">g3ws</span><span class=\"o\">.</span><span class=\"n\">start_receiver_task</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span><span class=\"p\">:</span> <span class=\"n\">Type</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">websocket</span><span class=\"o\">.</span><span class=\"n\">G3WebSocketClientProtocol</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.start_receiver_task", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.start_receiver_task", "kind": "function", "doc": "<p>Creates a task handling all incoming messages.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.require", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.require", "kind": "function", "doc": "<p>Sends a request  with a unique id and returns the body of the response with the same id.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.require_get", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.require_get", "kind": "function", "doc": "<p>Sends a GET request and returns the body of the response.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.require_post", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.require_post", "kind": "function", "doc": "<p>Sends a POST request and returns the body of the response.</p>\n\n<p>The default body is an empty list.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.generate_get_request", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.generate_get_request", "kind": "function", "doc": "<p>Generates a GET request.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span>,</span><span class=\"param\">\t<span class=\"n\">params</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.generate_post_request", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.generate_post_request", "kind": "function", "doc": "<p>Generates a POST request.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">uri</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">g3typing</span><span class=\"o\">.</span><span class=\"n\">URI</span>,</span><span class=\"param\">\t<span class=\"n\">body</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">ForwardRef</span><span class=\"p\">(</span><span class=\"s1\">&#39;JSONObject&#39;</span><span class=\"p\">)],</span> <span class=\"n\">NoneType</span><span class=\"p\">]],</span> <span class=\"n\">NoneType</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.websocket.G3WebSocketClientProtocol.close", "modulename": "g3pylib.websocket", "qualname": "G3WebSocketClientProtocol.close", "kind": "function", "doc": "<p>Cancel the receiver task and perform the closing handshake for the websocket.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>, </span><span class=\"param\"><span class=\"n\">reason</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;&#39;</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.websocket.exceptions", "modulename": "g3pylib.websocket.exceptions", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.websocket.exceptions.SubscribeError", "modulename": "g3pylib.websocket.exceptions", "qualname": "SubscribeError", "kind": "class", "doc": "<p>Raised when subscribing to a signal is unsuccessful.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.websocket.exceptions.UnsubscribeError", "modulename": "g3pylib.websocket.exceptions", "qualname": "UnsubscribeError", "kind": "class", "doc": "<p>Raised when unsubscribing to a signal is unsuccessful.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.websocket.exceptions.GlassesError", "modulename": "g3pylib.websocket.exceptions", "qualname": "GlassesError", "kind": "class", "doc": "<p>Raised when the glasses responds with an error websocket message.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.websocket.exceptions.GlassesError.__init__", "modulename": "g3pylib.websocket.exceptions", "qualname": "GlassesError.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">message</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">error_code</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span>)</span>"}, {"fullname": "g3pylib.websocket.exceptions.GlassesError.error_code", "modulename": "g3pylib.websocket.exceptions", "qualname": "GlassesError.error_code", "kind": "variable", "doc": "<p>The received error code.</p>\n", "annotation": ": int"}, {"fullname": "g3pylib.zeroconf", "modulename": "g3pylib.zeroconf", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "g3pylib.zeroconf.ServiceNotFoundError", "modulename": "g3pylib.zeroconf", "qualname": "ServiceNotFoundError", "kind": "class", "doc": "<p>Raised when a service request is not successful.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.zeroconf.IncompleteServiceError", "modulename": "g3pylib.zeroconf", "qualname": "IncompleteServiceError", "kind": "class", "doc": "<p>Raised when a service is missing an expected property.</p>\n", "bases": "builtins.Exception"}, {"fullname": "g3pylib.zeroconf.G3Service", "modulename": "g3pylib.zeroconf", "qualname": "G3Service", "kind": "class", "doc": "<p>A service representing a Glasses3 device on the network.</p>\n\n<p>Holds information about the g3api-service and the corresponding rtsp-service of a Glasses3 device. Unless explicitly stated, properties refer to the g3api-service.</p>\n\n<p>To discover Glasses3 services on a network, see <code>G3ServiceDiscovery</code>.</p>\n"}, {"fullname": "g3pylib.zeroconf.G3Service.__init__", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">service_info</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">AsyncServiceInfo</span></span>)</span>"}, {"fullname": "g3pylib.zeroconf.G3Service.service_info", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.service_info", "kind": "variable", "doc": "<p>The <code>AsyncServiceInfo</code> object containing all information about the service.</p>\n", "annotation": ": zeroconf.asyncio.AsyncServiceInfo"}, {"fullname": "g3pylib.zeroconf.G3Service.rtsp_service_info", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.rtsp_service_info", "kind": "variable", "doc": "<p>The <code>AsyncServiceInfo</code> object containing all information about the corresponding RTSP-service.</p>\n", "annotation": ": Optional[zeroconf.asyncio.AsyncServiceInfo]"}, {"fullname": "g3pylib.zeroconf.G3Service.hostname", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.hostname", "kind": "variable", "doc": "<p>The Glasses3 device's hostname.</p>\n", "annotation": ": str"}, {"fullname": "g3pylib.zeroconf.G3Service.type", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.type", "kind": "variable", "doc": "<p>The type of the service.</p>\n", "annotation": ": str"}, {"fullname": "g3pylib.zeroconf.G3Service.server", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.server", "kind": "variable", "doc": "<p>The name of the service host.</p>\n", "annotation": ": str"}, {"fullname": "g3pylib.zeroconf.G3Service.ipv4_address", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.ipv4_address", "kind": "variable", "doc": "<p>The IPv4 address of the service.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "g3pylib.zeroconf.G3Service.ipv6_address", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.ipv6_address", "kind": "variable", "doc": "<p>The IPv6 address of the service.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "g3pylib.zeroconf.G3Service.ws_url", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.ws_url", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">using_ip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ip_version</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">_utils</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">IPVersion</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">IPVersion</span><span class=\"o\">.</span><span class=\"n\">V4Only</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.zeroconf.G3Service.rtsp_url", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.rtsp_url", "kind": "function", "doc": "<p>The url used to connect to an RTSP client to the live stream.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">using_ip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ip_version</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">_utils</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">IPVersion</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">IPVersion</span><span class=\"o\">.</span><span class=\"n\">V4Only</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.zeroconf.G3Service.http_url", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.http_url", "kind": "function", "doc": "<p>The url used to make HTTP requests to the device.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">using_ip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">ip_version</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">_utils</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">IPVersion</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">IPVersion</span><span class=\"o\">.</span><span class=\"n\">V4Only</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.zeroconf.G3Service.rtsp_port", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.rtsp_port", "kind": "variable", "doc": "<p>The port used for the RTSP service.</p>\n", "annotation": ": Optional[int]"}, {"fullname": "g3pylib.zeroconf.G3Service.rtsp_live_path", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.rtsp_live_path", "kind": "variable", "doc": "<p>The RTSP-service live path</p>\n", "annotation": ": Optional[str]"}, {"fullname": "g3pylib.zeroconf.G3Service.rtsp_recordings_path", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.rtsp_recordings_path", "kind": "variable", "doc": "<p>The RTSP-service recordings path.</p>\n", "annotation": ": Optional[str]"}, {"fullname": "g3pylib.zeroconf.G3Service.request", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.request", "kind": "function", "doc": "<p>Attempts to update the services' information and raises <code>ServiceNotFoundError</code> when the services can't be found on the network.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">zc</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">_core</span><span class=\"o\">.</span><span class=\"n\">Zeroconf</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.zeroconf.G3Service.from_hostname", "modulename": "g3pylib.zeroconf", "qualname": "G3Service.from_hostname", "kind": "function", "doc": "<p>TODO: can be used to ... recommended G3disc</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">cls</span>, </span><span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">G3Service</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.zeroconf.EventKind", "modulename": "g3pylib.zeroconf", "qualname": "EventKind", "kind": "class", "doc": "<p>Defines service events.</p>\n", "bases": "enum.Enum"}, {"fullname": "g3pylib.zeroconf.EventKind.ADDED", "modulename": "g3pylib.zeroconf", "qualname": "EventKind.ADDED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventKind.ADDED: 1&gt;"}, {"fullname": "g3pylib.zeroconf.EventKind.REMOVED", "modulename": "g3pylib.zeroconf", "qualname": "EventKind.REMOVED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventKind.REMOVED: 2&gt;"}, {"fullname": "g3pylib.zeroconf.EventKind.UPDATED", "modulename": "g3pylib.zeroconf", "qualname": "EventKind.UPDATED", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;EventKind.UPDATED: 3&gt;"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery", "kind": "class", "doc": "<p>Tools for discovering Glasses3 services.</p>\n\n<p>To get a Glasses3 service by hostname, see <code>request_service</code>.</p>\n\n<p>To continuously handle Glasses3 services on the network, see <code>listen</code>.</p>\n"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.__init__", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">async_zeroconf</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">AsyncZeroconf</span>,</span><span class=\"param\">\t<span class=\"n\">services_handler</span><span class=\"p\">:</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">_G3ServicesHandler</span></span>)</span>"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.request_service", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.request_service", "kind": "function", "doc": "<p>Request information about a single specific service identified by its hostname.\nRaises <code>ServiceNotFoundError</code> when the service can't be found on the network.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">hostname</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">G3Service</span>:</span></span>", "funcdef": "async def"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.listen", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.listen", "kind": "function", "doc": "<p>Keeps discovery updated in the context including:</p>\n\n<p><code>services_by_serial_number</code>: dict containing all available services.\n<code>events</code>: queue with all service events\n<code>services</code>: list of all available services.</p>\n\n<p>Additionally, <code>wait_for_single_service</code> may be called to obtain the first available Glasses3 service.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span></span><span class=\"return-annotation\">) -> <span class=\"n\">AsyncIterator</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">G3ServiceDiscovery</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.services_by_serial_number", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.services_by_serial_number", "kind": "variable", "doc": "<p>A dict mapping serial number to <code>G3Service</code> for all available Glasses3 services.</p>\n\n<p>Is kept updated in the <code>listen</code> context.</p>\n", "annotation": ": Dict[str, g3pylib.zeroconf.G3Service]"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.events", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.events", "kind": "variable", "doc": "<p>A queue where service events are put.</p>\n\n<p>The events consists of tuples where</p>\n\n<ul>\n<li>the first entry indicates the type of event</li>\n<li>the second entry contains the relevant <code>G3Service</code>.</li>\n</ul>\n\n<p>Is kept updated in the <code>listen</code> context.</p>\n", "annotation": ": asyncio.queues.Queue[typing.Tuple[g3pylib.zeroconf.EventKind, g3pylib.zeroconf.G3Service]]"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.services", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.services", "kind": "variable", "doc": "<p>A list of all available <code>G3Service</code>.</p>\n\n<p>Is kept updated in the <code>listen</code> context.</p>\n", "annotation": ": List[g3pylib.zeroconf.G3Service]"}, {"fullname": "g3pylib.zeroconf.G3ServiceDiscovery.wait_for_single_service", "modulename": "g3pylib.zeroconf", "qualname": "G3ServiceDiscovery.wait_for_single_service", "kind": "function", "doc": "<p>Returns the first available <code>G3Service</code>.</p>\n\n<p><code>events</code> is the <code>G3DiscoveryService.events</code> queue used to look for service events.\n<code>ip_version</code> specifies what type(s) of ip address are required in the returned service.\n<code>timeout</code> defines the time in milliseconds before <code>asyncio.TimeoutError</code> is raised.</p>\n\n<p>Must be called in the <code>listen</code> context to find a service.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">events</span><span class=\"p\">:</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">queues</span><span class=\"o\">.</span><span class=\"n\">Queue</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">EventKind</span><span class=\"p\">,</span> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">G3Service</span><span class=\"p\">]]</span>,</span><span class=\"param\">\t<span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mi\">3000</span>,</span><span class=\"param\">\t<span class=\"n\">ip_version</span><span class=\"p\">:</span> <span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">_utils</span><span class=\"o\">.</span><span class=\"n\">net</span><span class=\"o\">.</span><span class=\"n\">IPVersion</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">IPVersion</span><span class=\"o\">.</span><span class=\"n\">All</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">g3pylib</span><span class=\"o\">.</span><span class=\"n\">zeroconf</span><span class=\"o\">.</span><span class=\"n\">G3Service</span>:</span></span>", "funcdef": "async def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();